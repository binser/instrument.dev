{% extends '@BinserInstrument/Pages/Shop/base.html.twig' %}

{% block shop_content %}
    <div class="container">
        <div class="row">
            <div class="col-sm-3" id="shop_menu">
                {{ knp_menu_render('shop', {'currentClass': 'active'}) }}
            </div>
            <div class="col-sm-9" id="shop_products">
                {% if pagination.items is not empty %}
                    <div class="row products masonry text-center" data-columns>
                        {% for product in pagination %}
                            <div class="masonry_thumb product">
                                <input type="hidden" class="product_id" value="{{ product.id }}">
                                <div class="product_title">
                                    <a href="{{ path('binser_instrument_shop_product', {'productId': product.id}) }}">
                                        {{ product.title }}
                                    </a>
                                </div>
                                <div class="img_block">
                                    {% thumbnail product.mainImage, 'medium' with {'class': 'product_image'} %}
                                    <div class="price_block">
                                        <input type="hidden" class="one_product_price" value="{{ product.price }}">
                                        <span class="product_price">{{ product.price }}</span> руб.
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-xs-8">
                                        <div class="add_to_basket">
                                            В КОРЗИНУ
                                        </div>
                                    </div>
                                    <div class="col-xs-4">
                                        <div class="change_basket_count_block">
                                            <span class="decrement inactive">-</span>&nbsp;
                                            <span class="product_count_to_add">1</span>&nbsp;
                                            <span class="increment">+</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        {% endfor %}
                        <div class="container text-right">
                            {{ knp_pagination_render(pagination) }}
                        </div>
                    </div>
                {% else %}
                    <div class="alert alert-warning">
                        Продуктов не найдено
                    </div>
                {% endif %}
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script type="text/javascript" src="{{ asset('lib/salvatore.min.js') }}"></script>
    <script type="text/javascript">
        function activateSectionMenu() {
            var $activeMenu = $('li.active', '#shop_menu');
            if ($activeMenu.hasClass('switch')) {
                $activeMenu.removeClass('collapsed').find('ul').addClass('in');
            } else {
                $activeMenu.closest('ul').addClass('in');
                $activeMenu.closest('switch').removeClass('collapsed');
            }
        }

        function changeProductPrice($product, count) {
            var $priceBlock = $product.find('.product_price'),
                productPrice = parseInt($product.find('.one_product_price').val()),
                newProductPrice = count * productPrice;

            $priceBlock.text(newProductPrice);
        }

        function changeCountProduct($button) {
            var increment = $button.hasClass('increment'),
                decrement = !increment,

                $product = $button.closest('.product'),
                $countBlock = $product.find('.product_count_to_add'),
                productCount = parseInt($countBlock.text());

            increment && (productCount += 1);
            decrement && (productCount -= 1);
            $countBlock.text(productCount);

            switch (productCount) {
                case 100:
                    increment && $button.addClass('.inactive');
                    break;
                case 2:
                    increment && $product.find('.decrement').removeClass('.inactive');
                    break;
                case 1:
                    decrement && $button.addClass('.inactive');
                    break;
                case 99:
                    decrement && $product.find('.increment').removeClass('.inactive');
                    break;
            }

            return productCount;
        }

        function changeProductInfo() {
            var $button = $(this),
                $product = $(this).closest('.product'),
                count = changeCountProduct($button);

            changeProductPrice($product, count);
        }

        function saveBasketProducts(data) {
            localStorage.setItem('basket_products', JSON.stringify(data));
        }

        function getBasketProducts() {
            return JSON.parse(localStorage.getItem('basket_products'));
        }

        function saveBasketSum(sum) {
            localStorage.setItem('basket_sum', sum);
        }

        function getBasketSum() {
            return JSON.parse(localStorage.getItem('basket_sum'));
        }


        $(document).ready(function() {
            activateSectionMenu();
            $('.increment:not(.inactive)').click(changeProductInfo);
            $('.decrement:not(.inactive)').click(changeProductInfo);

            $('.add_to_basket').click(function() {
                var $product = $(this).closest('.product'),
                    productId = $product.find('.product_id').val(),
                    productTitle = $product.find('.product_title').find('a').text(),
                    productPrice = parseInt($product.find('.one_product_price').text()),
                    countProductsForAdd = parseInt($product.find('.product_count_to_add').text()),
                    summForAdd = parseInt($product.find('.product_price').text()),
                    basketProducts = getBasketProducts(),
                    basketSumm = getBasketSum();

                if (basketProducts.hasOwnProperty(productId)) {
                    basketProducts[productId][2] += countProductsForAdd;
                } else {
                    basketProducts[productId] = [productTitle, productPrice, countProductsForAdd];
                }
                basketSumm += summForAdd;

                saveBasketProducts(basketProducts);
                saveBasketSum(basketSumm);
            });
        });
    </script>
{% endblock %}